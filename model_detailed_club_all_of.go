/*
Strava API v3

The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package strava

import (
	"encoding/json"
)

// DetailedClubAllOf struct for DetailedClubAllOf
type DetailedClubAllOf struct {
	// The membership status of the logged-in athlete.
	Membership *string `json:"membership,omitempty"`
	// Whether the currently logged-in athlete is an administrator of this club.
	Admin *bool `json:"admin,omitempty"`
	// Whether the currently logged-in athlete is the owner of this club.
	Owner *bool `json:"owner,omitempty"`
	// The number of athletes in the club that the logged-in athlete follows.
	FollowingCount *int32 `json:"following_count,omitempty"`
}

// NewDetailedClubAllOf instantiates a new DetailedClubAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDetailedClubAllOf() *DetailedClubAllOf {
	this := DetailedClubAllOf{}
	return &this
}

// NewDetailedClubAllOfWithDefaults instantiates a new DetailedClubAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDetailedClubAllOfWithDefaults() *DetailedClubAllOf {
	this := DetailedClubAllOf{}
	return &this
}

// GetMembership returns the Membership field value if set, zero value otherwise.
func (o *DetailedClubAllOf) GetMembership() string {
	if o == nil || o.Membership == nil {
		var ret string
		return ret
	}
	return *o.Membership
}

// GetMembershipOk returns a tuple with the Membership field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedClubAllOf) GetMembershipOk() (*string, bool) {
	if o == nil || o.Membership == nil {
		return nil, false
	}
	return o.Membership, true
}

// HasMembership returns a boolean if a field has been set.
func (o *DetailedClubAllOf) HasMembership() bool {
	if o != nil && o.Membership != nil {
		return true
	}

	return false
}

// SetMembership gets a reference to the given string and assigns it to the Membership field.
func (o *DetailedClubAllOf) SetMembership(v string) {
	o.Membership = &v
}

// GetAdmin returns the Admin field value if set, zero value otherwise.
func (o *DetailedClubAllOf) GetAdmin() bool {
	if o == nil || o.Admin == nil {
		var ret bool
		return ret
	}
	return *o.Admin
}

// GetAdminOk returns a tuple with the Admin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedClubAllOf) GetAdminOk() (*bool, bool) {
	if o == nil || o.Admin == nil {
		return nil, false
	}
	return o.Admin, true
}

// HasAdmin returns a boolean if a field has been set.
func (o *DetailedClubAllOf) HasAdmin() bool {
	if o != nil && o.Admin != nil {
		return true
	}

	return false
}

// SetAdmin gets a reference to the given bool and assigns it to the Admin field.
func (o *DetailedClubAllOf) SetAdmin(v bool) {
	o.Admin = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *DetailedClubAllOf) GetOwner() bool {
	if o == nil || o.Owner == nil {
		var ret bool
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedClubAllOf) GetOwnerOk() (*bool, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *DetailedClubAllOf) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given bool and assigns it to the Owner field.
func (o *DetailedClubAllOf) SetOwner(v bool) {
	o.Owner = &v
}

// GetFollowingCount returns the FollowingCount field value if set, zero value otherwise.
func (o *DetailedClubAllOf) GetFollowingCount() int32 {
	if o == nil || o.FollowingCount == nil {
		var ret int32
		return ret
	}
	return *o.FollowingCount
}

// GetFollowingCountOk returns a tuple with the FollowingCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedClubAllOf) GetFollowingCountOk() (*int32, bool) {
	if o == nil || o.FollowingCount == nil {
		return nil, false
	}
	return o.FollowingCount, true
}

// HasFollowingCount returns a boolean if a field has been set.
func (o *DetailedClubAllOf) HasFollowingCount() bool {
	if o != nil && o.FollowingCount != nil {
		return true
	}

	return false
}

// SetFollowingCount gets a reference to the given int32 and assigns it to the FollowingCount field.
func (o *DetailedClubAllOf) SetFollowingCount(v int32) {
	o.FollowingCount = &v
}

func (o DetailedClubAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Membership != nil {
		toSerialize["membership"] = o.Membership
	}
	if o.Admin != nil {
		toSerialize["admin"] = o.Admin
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.FollowingCount != nil {
		toSerialize["following_count"] = o.FollowingCount
	}
	return json.Marshal(toSerialize)
}

type NullableDetailedClubAllOf struct {
	value *DetailedClubAllOf
	isSet bool
}

func (v NullableDetailedClubAllOf) Get() *DetailedClubAllOf {
	return v.value
}

func (v *NullableDetailedClubAllOf) Set(val *DetailedClubAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDetailedClubAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDetailedClubAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetailedClubAllOf(val *DetailedClubAllOf) *NullableDetailedClubAllOf {
	return &NullableDetailedClubAllOf{value: val, isSet: true}
}

func (v NullableDetailedClubAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetailedClubAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


