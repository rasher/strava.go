/*
Strava API v3

The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package strava

import (
	"encoding/json"
)

// PhotosSummaryPrimary struct for PhotosSummaryPrimary
type PhotosSummaryPrimary struct {
	Id *int64 `json:"id,omitempty"`
	Source *int32 `json:"source,omitempty"`
	UniqueId *string `json:"unique_id,omitempty"`
	Urls *map[string]string `json:"urls,omitempty"`
}

// NewPhotosSummaryPrimary instantiates a new PhotosSummaryPrimary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhotosSummaryPrimary() *PhotosSummaryPrimary {
	this := PhotosSummaryPrimary{}
	return &this
}

// NewPhotosSummaryPrimaryWithDefaults instantiates a new PhotosSummaryPrimary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhotosSummaryPrimaryWithDefaults() *PhotosSummaryPrimary {
	this := PhotosSummaryPrimary{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PhotosSummaryPrimary) GetId() int64 {
	if o == nil || isNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhotosSummaryPrimary) GetIdOk() (*int64, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PhotosSummaryPrimary) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *PhotosSummaryPrimary) SetId(v int64) {
	o.Id = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *PhotosSummaryPrimary) GetSource() int32 {
	if o == nil || isNil(o.Source) {
		var ret int32
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhotosSummaryPrimary) GetSourceOk() (*int32, bool) {
	if o == nil || isNil(o.Source) {
    return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *PhotosSummaryPrimary) HasSource() bool {
	if o != nil && !isNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given int32 and assigns it to the Source field.
func (o *PhotosSummaryPrimary) SetSource(v int32) {
	o.Source = &v
}

// GetUniqueId returns the UniqueId field value if set, zero value otherwise.
func (o *PhotosSummaryPrimary) GetUniqueId() string {
	if o == nil || isNil(o.UniqueId) {
		var ret string
		return ret
	}
	return *o.UniqueId
}

// GetUniqueIdOk returns a tuple with the UniqueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhotosSummaryPrimary) GetUniqueIdOk() (*string, bool) {
	if o == nil || isNil(o.UniqueId) {
    return nil, false
	}
	return o.UniqueId, true
}

// HasUniqueId returns a boolean if a field has been set.
func (o *PhotosSummaryPrimary) HasUniqueId() bool {
	if o != nil && !isNil(o.UniqueId) {
		return true
	}

	return false
}

// SetUniqueId gets a reference to the given string and assigns it to the UniqueId field.
func (o *PhotosSummaryPrimary) SetUniqueId(v string) {
	o.UniqueId = &v
}

// GetUrls returns the Urls field value if set, zero value otherwise.
func (o *PhotosSummaryPrimary) GetUrls() map[string]string {
	if o == nil || isNil(o.Urls) {
		var ret map[string]string
		return ret
	}
	return *o.Urls
}

// GetUrlsOk returns a tuple with the Urls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhotosSummaryPrimary) GetUrlsOk() (*map[string]string, bool) {
	if o == nil || isNil(o.Urls) {
    return nil, false
	}
	return o.Urls, true
}

// HasUrls returns a boolean if a field has been set.
func (o *PhotosSummaryPrimary) HasUrls() bool {
	if o != nil && !isNil(o.Urls) {
		return true
	}

	return false
}

// SetUrls gets a reference to the given map[string]string and assigns it to the Urls field.
func (o *PhotosSummaryPrimary) SetUrls(v map[string]string) {
	o.Urls = &v
}

func (o PhotosSummaryPrimary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !isNil(o.UniqueId) {
		toSerialize["unique_id"] = o.UniqueId
	}
	if !isNil(o.Urls) {
		toSerialize["urls"] = o.Urls
	}
	return json.Marshal(toSerialize)
}

type NullablePhotosSummaryPrimary struct {
	value *PhotosSummaryPrimary
	isSet bool
}

func (v NullablePhotosSummaryPrimary) Get() *PhotosSummaryPrimary {
	return v.value
}

func (v *NullablePhotosSummaryPrimary) Set(val *PhotosSummaryPrimary) {
	v.value = val
	v.isSet = true
}

func (v NullablePhotosSummaryPrimary) IsSet() bool {
	return v.isSet
}

func (v *NullablePhotosSummaryPrimary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhotosSummaryPrimary(val *PhotosSummaryPrimary) *NullablePhotosSummaryPrimary {
	return &NullablePhotosSummaryPrimary{value: val, isSet: true}
}

func (v NullablePhotosSummaryPrimary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhotosSummaryPrimary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


