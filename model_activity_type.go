/*
Strava API v3

The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package strava

import (
	"encoding/json"
	"fmt"
)

// ActivityType An enumeration of the types an activity may have. Note that this enumeration does not include new sport types (e.g. MountainBikeRide, EMountainBikeRide), activities with these sport types will have the corresponding activity type (e.g. Ride for MountainBikeRide, EBikeRide for EMountainBikeRide)
type ActivityType string

// List of ActivityType
const (
	ALPINE_SKI ActivityType = "AlpineSki"
	BACKCOUNTRY_SKI ActivityType = "BackcountrySki"
	CANOEING ActivityType = "Canoeing"
	CROSSFIT ActivityType = "Crossfit"
	E_BIKE_RIDE ActivityType = "EBikeRide"
	ELLIPTICAL ActivityType = "Elliptical"
	GOLF ActivityType = "Golf"
	HANDCYCLE ActivityType = "Handcycle"
	HIKE ActivityType = "Hike"
	ICE_SKATE ActivityType = "IceSkate"
	INLINE_SKATE ActivityType = "InlineSkate"
	KAYAKING ActivityType = "Kayaking"
	KITESURF ActivityType = "Kitesurf"
	NORDIC_SKI ActivityType = "NordicSki"
	RIDE ActivityType = "Ride"
	ROCK_CLIMBING ActivityType = "RockClimbing"
	ROLLER_SKI ActivityType = "RollerSki"
	ROWING ActivityType = "Rowing"
	RUN ActivityType = "Run"
	SAIL ActivityType = "Sail"
	SKATEBOARD ActivityType = "Skateboard"
	SNOWBOARD ActivityType = "Snowboard"
	SNOWSHOE ActivityType = "Snowshoe"
	SOCCER ActivityType = "Soccer"
	STAIR_STEPPER ActivityType = "StairStepper"
	STAND_UP_PADDLING ActivityType = "StandUpPaddling"
	SURFING ActivityType = "Surfing"
	SWIM ActivityType = "Swim"
	VELOMOBILE ActivityType = "Velomobile"
	VIRTUAL_RIDE ActivityType = "VirtualRide"
	VIRTUAL_RUN ActivityType = "VirtualRun"
	WALK ActivityType = "Walk"
	WEIGHT_TRAINING ActivityType = "WeightTraining"
	WHEELCHAIR ActivityType = "Wheelchair"
	WINDSURF ActivityType = "Windsurf"
	WORKOUT ActivityType = "Workout"
	YOGA ActivityType = "Yoga"
)

// All allowed values of ActivityType enum
var AllowedActivityTypeEnumValues = []ActivityType{
	"AlpineSki",
	"BackcountrySki",
	"Canoeing",
	"Crossfit",
	"EBikeRide",
	"Elliptical",
	"Golf",
	"Handcycle",
	"Hike",
	"IceSkate",
	"InlineSkate",
	"Kayaking",
	"Kitesurf",
	"NordicSki",
	"Ride",
	"RockClimbing",
	"RollerSki",
	"Rowing",
	"Run",
	"Sail",
	"Skateboard",
	"Snowboard",
	"Snowshoe",
	"Soccer",
	"StairStepper",
	"StandUpPaddling",
	"Surfing",
	"Swim",
	"Velomobile",
	"VirtualRide",
	"VirtualRun",
	"Walk",
	"WeightTraining",
	"Wheelchair",
	"Windsurf",
	"Workout",
	"Yoga",
}

func (v *ActivityType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ActivityType(value)
	for _, existing := range AllowedActivityTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ActivityType", value)
}

// NewActivityTypeFromValue returns a pointer to a valid ActivityType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewActivityTypeFromValue(v string) (*ActivityType, error) {
	ev := ActivityType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ActivityType: valid values are %v", v, AllowedActivityTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ActivityType) IsValid() bool {
	for _, existing := range AllowedActivityTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ActivityType value
func (v ActivityType) Ptr() *ActivityType {
	return &v
}

type NullableActivityType struct {
	value *ActivityType
	isSet bool
}

func (v NullableActivityType) Get() *ActivityType {
	return v.value
}

func (v *NullableActivityType) Set(val *ActivityType) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityType) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityType(val *ActivityType) *NullableActivityType {
	return &NullableActivityType{value: val, isSet: true}
}

func (v NullableActivityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

