/*
Strava API v3

The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package strava

import (
	"encoding/json"
)

// SummaryGear struct for SummaryGear
type SummaryGear struct {
	// The gear's unique identifier.
	Id *string `json:"id,omitempty"`
	// Resource state, indicates level of detail. Possible values: 2 -> \"summary\", 3 -> \"detail\"
	ResourceState *int32 `json:"resource_state,omitempty"`
	// Whether this gear's is the owner's default one.
	Primary *bool `json:"primary,omitempty"`
	// The gear's name.
	Name *string `json:"name,omitempty"`
	// The distance logged with this gear.
	Distance *float32 `json:"distance,omitempty"`
}

// NewSummaryGear instantiates a new SummaryGear object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSummaryGear() *SummaryGear {
	this := SummaryGear{}
	return &this
}

// NewSummaryGearWithDefaults instantiates a new SummaryGear object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSummaryGearWithDefaults() *SummaryGear {
	this := SummaryGear{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SummaryGear) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryGear) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SummaryGear) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SummaryGear) SetId(v string) {
	o.Id = &v
}

// GetResourceState returns the ResourceState field value if set, zero value otherwise.
func (o *SummaryGear) GetResourceState() int32 {
	if o == nil || isNil(o.ResourceState) {
		var ret int32
		return ret
	}
	return *o.ResourceState
}

// GetResourceStateOk returns a tuple with the ResourceState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryGear) GetResourceStateOk() (*int32, bool) {
	if o == nil || isNil(o.ResourceState) {
    return nil, false
	}
	return o.ResourceState, true
}

// HasResourceState returns a boolean if a field has been set.
func (o *SummaryGear) HasResourceState() bool {
	if o != nil && !isNil(o.ResourceState) {
		return true
	}

	return false
}

// SetResourceState gets a reference to the given int32 and assigns it to the ResourceState field.
func (o *SummaryGear) SetResourceState(v int32) {
	o.ResourceState = &v
}

// GetPrimary returns the Primary field value if set, zero value otherwise.
func (o *SummaryGear) GetPrimary() bool {
	if o == nil || isNil(o.Primary) {
		var ret bool
		return ret
	}
	return *o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryGear) GetPrimaryOk() (*bool, bool) {
	if o == nil || isNil(o.Primary) {
    return nil, false
	}
	return o.Primary, true
}

// HasPrimary returns a boolean if a field has been set.
func (o *SummaryGear) HasPrimary() bool {
	if o != nil && !isNil(o.Primary) {
		return true
	}

	return false
}

// SetPrimary gets a reference to the given bool and assigns it to the Primary field.
func (o *SummaryGear) SetPrimary(v bool) {
	o.Primary = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SummaryGear) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryGear) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SummaryGear) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SummaryGear) SetName(v string) {
	o.Name = &v
}

// GetDistance returns the Distance field value if set, zero value otherwise.
func (o *SummaryGear) GetDistance() float32 {
	if o == nil || isNil(o.Distance) {
		var ret float32
		return ret
	}
	return *o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryGear) GetDistanceOk() (*float32, bool) {
	if o == nil || isNil(o.Distance) {
    return nil, false
	}
	return o.Distance, true
}

// HasDistance returns a boolean if a field has been set.
func (o *SummaryGear) HasDistance() bool {
	if o != nil && !isNil(o.Distance) {
		return true
	}

	return false
}

// SetDistance gets a reference to the given float32 and assigns it to the Distance field.
func (o *SummaryGear) SetDistance(v float32) {
	o.Distance = &v
}

func (o SummaryGear) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.ResourceState) {
		toSerialize["resource_state"] = o.ResourceState
	}
	if !isNil(o.Primary) {
		toSerialize["primary"] = o.Primary
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Distance) {
		toSerialize["distance"] = o.Distance
	}
	return json.Marshal(toSerialize)
}

type NullableSummaryGear struct {
	value *SummaryGear
	isSet bool
}

func (v NullableSummaryGear) Get() *SummaryGear {
	return v.value
}

func (v *NullableSummaryGear) Set(val *SummaryGear) {
	v.value = val
	v.isSet = true
}

func (v NullableSummaryGear) IsSet() bool {
	return v.isSet
}

func (v *NullableSummaryGear) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSummaryGear(val *SummaryGear) *NullableSummaryGear {
	return &NullableSummaryGear{value: val, isSet: true}
}

func (v NullableSummaryGear) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSummaryGear) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


