/*
Strava API v3

The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package strava

import (
	"encoding/json"
	"time"
)

// DetailedSegmentAllOf struct for DetailedSegmentAllOf
type DetailedSegmentAllOf struct {
	// The time at which the segment was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The time at which the segment was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The segment's total elevation gain.
	TotalElevationGain *float32 `json:"total_elevation_gain,omitempty"`
	Map *PolylineMap `json:"map,omitempty"`
	// The total number of efforts for this segment
	EffortCount *int32 `json:"effort_count,omitempty"`
	// The number of unique athletes who have an effort for this segment
	AthleteCount *int32 `json:"athlete_count,omitempty"`
	// Whether this segment is considered hazardous
	Hazardous *bool `json:"hazardous,omitempty"`
	// The number of stars for this segment
	StarCount *int32 `json:"star_count,omitempty"`
}

// NewDetailedSegmentAllOf instantiates a new DetailedSegmentAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDetailedSegmentAllOf() *DetailedSegmentAllOf {
	this := DetailedSegmentAllOf{}
	return &this
}

// NewDetailedSegmentAllOfWithDefaults instantiates a new DetailedSegmentAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDetailedSegmentAllOfWithDefaults() *DetailedSegmentAllOf {
	this := DetailedSegmentAllOf{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DetailedSegmentAllOf) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedSegmentAllOf) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DetailedSegmentAllOf) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *DetailedSegmentAllOf) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DetailedSegmentAllOf) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedSegmentAllOf) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DetailedSegmentAllOf) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *DetailedSegmentAllOf) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetTotalElevationGain returns the TotalElevationGain field value if set, zero value otherwise.
func (o *DetailedSegmentAllOf) GetTotalElevationGain() float32 {
	if o == nil || o.TotalElevationGain == nil {
		var ret float32
		return ret
	}
	return *o.TotalElevationGain
}

// GetTotalElevationGainOk returns a tuple with the TotalElevationGain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedSegmentAllOf) GetTotalElevationGainOk() (*float32, bool) {
	if o == nil || o.TotalElevationGain == nil {
		return nil, false
	}
	return o.TotalElevationGain, true
}

// HasTotalElevationGain returns a boolean if a field has been set.
func (o *DetailedSegmentAllOf) HasTotalElevationGain() bool {
	if o != nil && o.TotalElevationGain != nil {
		return true
	}

	return false
}

// SetTotalElevationGain gets a reference to the given float32 and assigns it to the TotalElevationGain field.
func (o *DetailedSegmentAllOf) SetTotalElevationGain(v float32) {
	o.TotalElevationGain = &v
}

// GetMap returns the Map field value if set, zero value otherwise.
func (o *DetailedSegmentAllOf) GetMap() PolylineMap {
	if o == nil || o.Map == nil {
		var ret PolylineMap
		return ret
	}
	return *o.Map
}

// GetMapOk returns a tuple with the Map field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedSegmentAllOf) GetMapOk() (*PolylineMap, bool) {
	if o == nil || o.Map == nil {
		return nil, false
	}
	return o.Map, true
}

// HasMap returns a boolean if a field has been set.
func (o *DetailedSegmentAllOf) HasMap() bool {
	if o != nil && o.Map != nil {
		return true
	}

	return false
}

// SetMap gets a reference to the given PolylineMap and assigns it to the Map field.
func (o *DetailedSegmentAllOf) SetMap(v PolylineMap) {
	o.Map = &v
}

// GetEffortCount returns the EffortCount field value if set, zero value otherwise.
func (o *DetailedSegmentAllOf) GetEffortCount() int32 {
	if o == nil || o.EffortCount == nil {
		var ret int32
		return ret
	}
	return *o.EffortCount
}

// GetEffortCountOk returns a tuple with the EffortCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedSegmentAllOf) GetEffortCountOk() (*int32, bool) {
	if o == nil || o.EffortCount == nil {
		return nil, false
	}
	return o.EffortCount, true
}

// HasEffortCount returns a boolean if a field has been set.
func (o *DetailedSegmentAllOf) HasEffortCount() bool {
	if o != nil && o.EffortCount != nil {
		return true
	}

	return false
}

// SetEffortCount gets a reference to the given int32 and assigns it to the EffortCount field.
func (o *DetailedSegmentAllOf) SetEffortCount(v int32) {
	o.EffortCount = &v
}

// GetAthleteCount returns the AthleteCount field value if set, zero value otherwise.
func (o *DetailedSegmentAllOf) GetAthleteCount() int32 {
	if o == nil || o.AthleteCount == nil {
		var ret int32
		return ret
	}
	return *o.AthleteCount
}

// GetAthleteCountOk returns a tuple with the AthleteCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedSegmentAllOf) GetAthleteCountOk() (*int32, bool) {
	if o == nil || o.AthleteCount == nil {
		return nil, false
	}
	return o.AthleteCount, true
}

// HasAthleteCount returns a boolean if a field has been set.
func (o *DetailedSegmentAllOf) HasAthleteCount() bool {
	if o != nil && o.AthleteCount != nil {
		return true
	}

	return false
}

// SetAthleteCount gets a reference to the given int32 and assigns it to the AthleteCount field.
func (o *DetailedSegmentAllOf) SetAthleteCount(v int32) {
	o.AthleteCount = &v
}

// GetHazardous returns the Hazardous field value if set, zero value otherwise.
func (o *DetailedSegmentAllOf) GetHazardous() bool {
	if o == nil || o.Hazardous == nil {
		var ret bool
		return ret
	}
	return *o.Hazardous
}

// GetHazardousOk returns a tuple with the Hazardous field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedSegmentAllOf) GetHazardousOk() (*bool, bool) {
	if o == nil || o.Hazardous == nil {
		return nil, false
	}
	return o.Hazardous, true
}

// HasHazardous returns a boolean if a field has been set.
func (o *DetailedSegmentAllOf) HasHazardous() bool {
	if o != nil && o.Hazardous != nil {
		return true
	}

	return false
}

// SetHazardous gets a reference to the given bool and assigns it to the Hazardous field.
func (o *DetailedSegmentAllOf) SetHazardous(v bool) {
	o.Hazardous = &v
}

// GetStarCount returns the StarCount field value if set, zero value otherwise.
func (o *DetailedSegmentAllOf) GetStarCount() int32 {
	if o == nil || o.StarCount == nil {
		var ret int32
		return ret
	}
	return *o.StarCount
}

// GetStarCountOk returns a tuple with the StarCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedSegmentAllOf) GetStarCountOk() (*int32, bool) {
	if o == nil || o.StarCount == nil {
		return nil, false
	}
	return o.StarCount, true
}

// HasStarCount returns a boolean if a field has been set.
func (o *DetailedSegmentAllOf) HasStarCount() bool {
	if o != nil && o.StarCount != nil {
		return true
	}

	return false
}

// SetStarCount gets a reference to the given int32 and assigns it to the StarCount field.
func (o *DetailedSegmentAllOf) SetStarCount(v int32) {
	o.StarCount = &v
}

func (o DetailedSegmentAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.TotalElevationGain != nil {
		toSerialize["total_elevation_gain"] = o.TotalElevationGain
	}
	if o.Map != nil {
		toSerialize["map"] = o.Map
	}
	if o.EffortCount != nil {
		toSerialize["effort_count"] = o.EffortCount
	}
	if o.AthleteCount != nil {
		toSerialize["athlete_count"] = o.AthleteCount
	}
	if o.Hazardous != nil {
		toSerialize["hazardous"] = o.Hazardous
	}
	if o.StarCount != nil {
		toSerialize["star_count"] = o.StarCount
	}
	return json.Marshal(toSerialize)
}

type NullableDetailedSegmentAllOf struct {
	value *DetailedSegmentAllOf
	isSet bool
}

func (v NullableDetailedSegmentAllOf) Get() *DetailedSegmentAllOf {
	return v.value
}

func (v *NullableDetailedSegmentAllOf) Set(val *DetailedSegmentAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDetailedSegmentAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDetailedSegmentAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetailedSegmentAllOf(val *DetailedSegmentAllOf) *NullableDetailedSegmentAllOf {
	return &NullableDetailedSegmentAllOf{value: val, isSet: true}
}

func (v NullableDetailedSegmentAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetailedSegmentAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


