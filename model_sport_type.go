/*
Strava API v3

The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package strava

import (
	"encoding/json"
	"fmt"
)

// SportType An enumeration of the sport types an activity may have. Distinct from ActivityType in that it has new types (e.g. MountainBikeRide)
type SportType string

// List of SportType
const (
	ALPINE_SKI SportType = "AlpineSki"
	BACKCOUNTRY_SKI SportType = "BackcountrySki"
	CANOEING SportType = "Canoeing"
	CROSSFIT SportType = "Crossfit"
	E_BIKE_RIDE SportType = "EBikeRide"
	ELLIPTICAL SportType = "Elliptical"
	E_MOUNTAIN_BIKE_RIDE SportType = "EMountainBikeRide"
	GOLF SportType = "Golf"
	GRAVEL_RIDE SportType = "GravelRide"
	HANDCYCLE SportType = "Handcycle"
	HIKE SportType = "Hike"
	ICE_SKATE SportType = "IceSkate"
	INLINE_SKATE SportType = "InlineSkate"
	KAYAKING SportType = "Kayaking"
	KITESURF SportType = "Kitesurf"
	MOUNTAIN_BIKE_RIDE SportType = "MountainBikeRide"
	NORDIC_SKI SportType = "NordicSki"
	RIDE SportType = "Ride"
	ROCK_CLIMBING SportType = "RockClimbing"
	ROLLER_SKI SportType = "RollerSki"
	ROWING SportType = "Rowing"
	RUN SportType = "Run"
	SAIL SportType = "Sail"
	SKATEBOARD SportType = "Skateboard"
	SNOWBOARD SportType = "Snowboard"
	SNOWSHOE SportType = "Snowshoe"
	SOCCER SportType = "Soccer"
	STAIR_STEPPER SportType = "StairStepper"
	STAND_UP_PADDLING SportType = "StandUpPaddling"
	SURFING SportType = "Surfing"
	SWIM SportType = "Swim"
	TRAIL_RUN SportType = "TrailRun"
	VELOMOBILE SportType = "Velomobile"
	VIRTUAL_RIDE SportType = "VirtualRide"
	VIRTUAL_RUN SportType = "VirtualRun"
	WALK SportType = "Walk"
	WEIGHT_TRAINING SportType = "WeightTraining"
	WHEELCHAIR SportType = "Wheelchair"
	WINDSURF SportType = "Windsurf"
	WORKOUT SportType = "Workout"
	YOGA SportType = "Yoga"
)

// All allowed values of SportType enum
var AllowedSportTypeEnumValues = []SportType{
	"AlpineSki",
	"BackcountrySki",
	"Canoeing",
	"Crossfit",
	"EBikeRide",
	"Elliptical",
	"EMountainBikeRide",
	"Golf",
	"GravelRide",
	"Handcycle",
	"Hike",
	"IceSkate",
	"InlineSkate",
	"Kayaking",
	"Kitesurf",
	"MountainBikeRide",
	"NordicSki",
	"Ride",
	"RockClimbing",
	"RollerSki",
	"Rowing",
	"Run",
	"Sail",
	"Skateboard",
	"Snowboard",
	"Snowshoe",
	"Soccer",
	"StairStepper",
	"StandUpPaddling",
	"Surfing",
	"Swim",
	"TrailRun",
	"Velomobile",
	"VirtualRide",
	"VirtualRun",
	"Walk",
	"WeightTraining",
	"Wheelchair",
	"Windsurf",
	"Workout",
	"Yoga",
}

func (v *SportType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SportType(value)
	for _, existing := range AllowedSportTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SportType", value)
}

// NewSportTypeFromValue returns a pointer to a valid SportType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSportTypeFromValue(v string) (*SportType, error) {
	ev := SportType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SportType: valid values are %v", v, AllowedSportTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SportType) IsValid() bool {
	for _, existing := range AllowedSportTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SportType value
func (v SportType) Ptr() *SportType {
	return &v
}

type NullableSportType struct {
	value *SportType
	isSet bool
}

func (v NullableSportType) Get() *SportType {
	return v.value
}

func (v *NullableSportType) Set(val *SportType) {
	v.value = val
	v.isSet = true
}

func (v NullableSportType) IsSet() bool {
	return v.isSet
}

func (v *NullableSportType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSportType(val *SportType) *NullableSportType {
	return &NullableSportType{value: val, isSet: true}
}

func (v NullableSportType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSportType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

