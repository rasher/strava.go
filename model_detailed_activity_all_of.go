/*
Strava API v3

The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package strava

import (
	"encoding/json"
)

// DetailedActivityAllOf struct for DetailedActivityAllOf
type DetailedActivityAllOf struct {
	// The description of the activity
	Description *string `json:"description,omitempty"`
	Photos *PhotosSummary `json:"photos,omitempty"`
	Gear *SummaryGear `json:"gear,omitempty"`
	// The number of kilocalories consumed during this activity
	Calories *float32 `json:"calories,omitempty"`
	SegmentEfforts []DetailedSegmentEffort `json:"segment_efforts,omitempty"`
	// The name of the device used to record the activity
	DeviceName *string `json:"device_name,omitempty"`
	// The token used to embed a Strava activity
	EmbedToken *string `json:"embed_token,omitempty"`
	// The splits of this activity in metric units (for runs)
	SplitsMetric []Split `json:"splits_metric,omitempty"`
	// The splits of this activity in imperial units (for runs)
	SplitsStandard []Split `json:"splits_standard,omitempty"`
	Laps []Lap `json:"laps,omitempty"`
	BestEfforts []DetailedSegmentEffort `json:"best_efforts,omitempty"`
}

// NewDetailedActivityAllOf instantiates a new DetailedActivityAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDetailedActivityAllOf() *DetailedActivityAllOf {
	this := DetailedActivityAllOf{}
	return &this
}

// NewDetailedActivityAllOfWithDefaults instantiates a new DetailedActivityAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDetailedActivityAllOfWithDefaults() *DetailedActivityAllOf {
	this := DetailedActivityAllOf{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DetailedActivityAllOf) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedActivityAllOf) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DetailedActivityAllOf) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DetailedActivityAllOf) SetDescription(v string) {
	o.Description = &v
}

// GetPhotos returns the Photos field value if set, zero value otherwise.
func (o *DetailedActivityAllOf) GetPhotos() PhotosSummary {
	if o == nil || isNil(o.Photos) {
		var ret PhotosSummary
		return ret
	}
	return *o.Photos
}

// GetPhotosOk returns a tuple with the Photos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedActivityAllOf) GetPhotosOk() (*PhotosSummary, bool) {
	if o == nil || isNil(o.Photos) {
    return nil, false
	}
	return o.Photos, true
}

// HasPhotos returns a boolean if a field has been set.
func (o *DetailedActivityAllOf) HasPhotos() bool {
	if o != nil && !isNil(o.Photos) {
		return true
	}

	return false
}

// SetPhotos gets a reference to the given PhotosSummary and assigns it to the Photos field.
func (o *DetailedActivityAllOf) SetPhotos(v PhotosSummary) {
	o.Photos = &v
}

// GetGear returns the Gear field value if set, zero value otherwise.
func (o *DetailedActivityAllOf) GetGear() SummaryGear {
	if o == nil || isNil(o.Gear) {
		var ret SummaryGear
		return ret
	}
	return *o.Gear
}

// GetGearOk returns a tuple with the Gear field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedActivityAllOf) GetGearOk() (*SummaryGear, bool) {
	if o == nil || isNil(o.Gear) {
    return nil, false
	}
	return o.Gear, true
}

// HasGear returns a boolean if a field has been set.
func (o *DetailedActivityAllOf) HasGear() bool {
	if o != nil && !isNil(o.Gear) {
		return true
	}

	return false
}

// SetGear gets a reference to the given SummaryGear and assigns it to the Gear field.
func (o *DetailedActivityAllOf) SetGear(v SummaryGear) {
	o.Gear = &v
}

// GetCalories returns the Calories field value if set, zero value otherwise.
func (o *DetailedActivityAllOf) GetCalories() float32 {
	if o == nil || isNil(o.Calories) {
		var ret float32
		return ret
	}
	return *o.Calories
}

// GetCaloriesOk returns a tuple with the Calories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedActivityAllOf) GetCaloriesOk() (*float32, bool) {
	if o == nil || isNil(o.Calories) {
    return nil, false
	}
	return o.Calories, true
}

// HasCalories returns a boolean if a field has been set.
func (o *DetailedActivityAllOf) HasCalories() bool {
	if o != nil && !isNil(o.Calories) {
		return true
	}

	return false
}

// SetCalories gets a reference to the given float32 and assigns it to the Calories field.
func (o *DetailedActivityAllOf) SetCalories(v float32) {
	o.Calories = &v
}

// GetSegmentEfforts returns the SegmentEfforts field value if set, zero value otherwise.
func (o *DetailedActivityAllOf) GetSegmentEfforts() []DetailedSegmentEffort {
	if o == nil || isNil(o.SegmentEfforts) {
		var ret []DetailedSegmentEffort
		return ret
	}
	return o.SegmentEfforts
}

// GetSegmentEffortsOk returns a tuple with the SegmentEfforts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedActivityAllOf) GetSegmentEffortsOk() ([]DetailedSegmentEffort, bool) {
	if o == nil || isNil(o.SegmentEfforts) {
    return nil, false
	}
	return o.SegmentEfforts, true
}

// HasSegmentEfforts returns a boolean if a field has been set.
func (o *DetailedActivityAllOf) HasSegmentEfforts() bool {
	if o != nil && !isNil(o.SegmentEfforts) {
		return true
	}

	return false
}

// SetSegmentEfforts gets a reference to the given []DetailedSegmentEffort and assigns it to the SegmentEfforts field.
func (o *DetailedActivityAllOf) SetSegmentEfforts(v []DetailedSegmentEffort) {
	o.SegmentEfforts = v
}

// GetDeviceName returns the DeviceName field value if set, zero value otherwise.
func (o *DetailedActivityAllOf) GetDeviceName() string {
	if o == nil || isNil(o.DeviceName) {
		var ret string
		return ret
	}
	return *o.DeviceName
}

// GetDeviceNameOk returns a tuple with the DeviceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedActivityAllOf) GetDeviceNameOk() (*string, bool) {
	if o == nil || isNil(o.DeviceName) {
    return nil, false
	}
	return o.DeviceName, true
}

// HasDeviceName returns a boolean if a field has been set.
func (o *DetailedActivityAllOf) HasDeviceName() bool {
	if o != nil && !isNil(o.DeviceName) {
		return true
	}

	return false
}

// SetDeviceName gets a reference to the given string and assigns it to the DeviceName field.
func (o *DetailedActivityAllOf) SetDeviceName(v string) {
	o.DeviceName = &v
}

// GetEmbedToken returns the EmbedToken field value if set, zero value otherwise.
func (o *DetailedActivityAllOf) GetEmbedToken() string {
	if o == nil || isNil(o.EmbedToken) {
		var ret string
		return ret
	}
	return *o.EmbedToken
}

// GetEmbedTokenOk returns a tuple with the EmbedToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedActivityAllOf) GetEmbedTokenOk() (*string, bool) {
	if o == nil || isNil(o.EmbedToken) {
    return nil, false
	}
	return o.EmbedToken, true
}

// HasEmbedToken returns a boolean if a field has been set.
func (o *DetailedActivityAllOf) HasEmbedToken() bool {
	if o != nil && !isNil(o.EmbedToken) {
		return true
	}

	return false
}

// SetEmbedToken gets a reference to the given string and assigns it to the EmbedToken field.
func (o *DetailedActivityAllOf) SetEmbedToken(v string) {
	o.EmbedToken = &v
}

// GetSplitsMetric returns the SplitsMetric field value if set, zero value otherwise.
func (o *DetailedActivityAllOf) GetSplitsMetric() []Split {
	if o == nil || isNil(o.SplitsMetric) {
		var ret []Split
		return ret
	}
	return o.SplitsMetric
}

// GetSplitsMetricOk returns a tuple with the SplitsMetric field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedActivityAllOf) GetSplitsMetricOk() ([]Split, bool) {
	if o == nil || isNil(o.SplitsMetric) {
    return nil, false
	}
	return o.SplitsMetric, true
}

// HasSplitsMetric returns a boolean if a field has been set.
func (o *DetailedActivityAllOf) HasSplitsMetric() bool {
	if o != nil && !isNil(o.SplitsMetric) {
		return true
	}

	return false
}

// SetSplitsMetric gets a reference to the given []Split and assigns it to the SplitsMetric field.
func (o *DetailedActivityAllOf) SetSplitsMetric(v []Split) {
	o.SplitsMetric = v
}

// GetSplitsStandard returns the SplitsStandard field value if set, zero value otherwise.
func (o *DetailedActivityAllOf) GetSplitsStandard() []Split {
	if o == nil || isNil(o.SplitsStandard) {
		var ret []Split
		return ret
	}
	return o.SplitsStandard
}

// GetSplitsStandardOk returns a tuple with the SplitsStandard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedActivityAllOf) GetSplitsStandardOk() ([]Split, bool) {
	if o == nil || isNil(o.SplitsStandard) {
    return nil, false
	}
	return o.SplitsStandard, true
}

// HasSplitsStandard returns a boolean if a field has been set.
func (o *DetailedActivityAllOf) HasSplitsStandard() bool {
	if o != nil && !isNil(o.SplitsStandard) {
		return true
	}

	return false
}

// SetSplitsStandard gets a reference to the given []Split and assigns it to the SplitsStandard field.
func (o *DetailedActivityAllOf) SetSplitsStandard(v []Split) {
	o.SplitsStandard = v
}

// GetLaps returns the Laps field value if set, zero value otherwise.
func (o *DetailedActivityAllOf) GetLaps() []Lap {
	if o == nil || isNil(o.Laps) {
		var ret []Lap
		return ret
	}
	return o.Laps
}

// GetLapsOk returns a tuple with the Laps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedActivityAllOf) GetLapsOk() ([]Lap, bool) {
	if o == nil || isNil(o.Laps) {
    return nil, false
	}
	return o.Laps, true
}

// HasLaps returns a boolean if a field has been set.
func (o *DetailedActivityAllOf) HasLaps() bool {
	if o != nil && !isNil(o.Laps) {
		return true
	}

	return false
}

// SetLaps gets a reference to the given []Lap and assigns it to the Laps field.
func (o *DetailedActivityAllOf) SetLaps(v []Lap) {
	o.Laps = v
}

// GetBestEfforts returns the BestEfforts field value if set, zero value otherwise.
func (o *DetailedActivityAllOf) GetBestEfforts() []DetailedSegmentEffort {
	if o == nil || isNil(o.BestEfforts) {
		var ret []DetailedSegmentEffort
		return ret
	}
	return o.BestEfforts
}

// GetBestEffortsOk returns a tuple with the BestEfforts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedActivityAllOf) GetBestEffortsOk() ([]DetailedSegmentEffort, bool) {
	if o == nil || isNil(o.BestEfforts) {
    return nil, false
	}
	return o.BestEfforts, true
}

// HasBestEfforts returns a boolean if a field has been set.
func (o *DetailedActivityAllOf) HasBestEfforts() bool {
	if o != nil && !isNil(o.BestEfforts) {
		return true
	}

	return false
}

// SetBestEfforts gets a reference to the given []DetailedSegmentEffort and assigns it to the BestEfforts field.
func (o *DetailedActivityAllOf) SetBestEfforts(v []DetailedSegmentEffort) {
	o.BestEfforts = v
}

func (o DetailedActivityAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.Photos) {
		toSerialize["photos"] = o.Photos
	}
	if !isNil(o.Gear) {
		toSerialize["gear"] = o.Gear
	}
	if !isNil(o.Calories) {
		toSerialize["calories"] = o.Calories
	}
	if !isNil(o.SegmentEfforts) {
		toSerialize["segment_efforts"] = o.SegmentEfforts
	}
	if !isNil(o.DeviceName) {
		toSerialize["device_name"] = o.DeviceName
	}
	if !isNil(o.EmbedToken) {
		toSerialize["embed_token"] = o.EmbedToken
	}
	if !isNil(o.SplitsMetric) {
		toSerialize["splits_metric"] = o.SplitsMetric
	}
	if !isNil(o.SplitsStandard) {
		toSerialize["splits_standard"] = o.SplitsStandard
	}
	if !isNil(o.Laps) {
		toSerialize["laps"] = o.Laps
	}
	if !isNil(o.BestEfforts) {
		toSerialize["best_efforts"] = o.BestEfforts
	}
	return json.Marshal(toSerialize)
}

type NullableDetailedActivityAllOf struct {
	value *DetailedActivityAllOf
	isSet bool
}

func (v NullableDetailedActivityAllOf) Get() *DetailedActivityAllOf {
	return v.value
}

func (v *NullableDetailedActivityAllOf) Set(val *DetailedActivityAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDetailedActivityAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDetailedActivityAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetailedActivityAllOf(val *DetailedActivityAllOf) *NullableDetailedActivityAllOf {
	return &NullableDetailedActivityAllOf{value: val, isSet: true}
}

func (v NullableDetailedActivityAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetailedActivityAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


